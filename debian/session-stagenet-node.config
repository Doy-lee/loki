#!/bin/sh -e

. /usr/share/debconf/confmodule

db_capb escape

I="(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])"
IPREGEX="^$I\.$I\.$I\.$I$"

while true; do
    db_input high oxen-service-node/ip-address || true
    db_go
    db_get oxen-service-node/ip-address
    IP="$RET"

    if echo "$IP" | grep -qE "$IPREGEX"; then
        break
    elif [ "$IP" = "" ]; then
        errfile=$(mktemp)
        IP=$(curl -sS http://api.ipify.org || true)
        curl_error=$(cat $errfile)
        rm -f ${errfile}

        if echo "$IP" | grep -qE "$IPREGEX"; then
            db_set oxen-service-node/ip-address "$IP"
            db_subst oxen-service-node/confirm-ip-lookup IP "$IP"
            db_input high oxen-service-node/confirm-ip-lookup
            db_go
            db_get oxen-service-node/confirm-ip-lookup
            if [ "$RET" = "true" ]; then
                break
            fi
            db_reset oxen-service-node/ip-address
        else
            db_subst oxen-service-node/ip-lookup-failed REASON "${curl_error}"
            db_input high oxen-service-node/ip-lookup-failed
            db_go
            db_get oxen-service-node/ip-lookup-failed
            RETRY="$RET"
            db_reset oxen-service-node/ip-lookup-failed
            if [ "$RETRY" = "true" ]; then
                db_reset oxen-service-node/ip-address
            else
                break
            fi
        fi
    else
        db_input high oxen-service-node/invalid-ip
        db_go
        db_get oxen-service-node/invalid-ip
        RETRY="$RET"
        db_reset oxen-service-node/invalid-ip
        if [ "$RETRY" = "true" ]; then
            db_reset oxen-service-node/ip-address
        else
            break
        fi
    fi
done

while true; do
    db_get session-stagenet-node/l2-provider
    WAS="$RET"
    db_input high session-stagenet-node/l2-provider || true
    db_go
    db_get session-stagenet-node/l2-provider
    L2="$RET"

    if [ -n "$WAS" ] && [ "$WAS" = "$L2" ]; then
        break
    fi

    if [ -n "$L2" ]; then
        outfile=$(mktemp)
        errfile=$(mktemp)
        bad=1
        if curl -sSX POST "$L2" --connect-timeout 10 -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"eth_chainId","params":[],"id":1}' -o "$outfile" 2>"$errfile"; then
            if grep '"0x66eee"' "$outfile" >/dev/null; then
                bad=
            else
                echo "Did not found expected Arbitrum Sepolia networkid \"0x66eee\" in the L2 provider eth_chainId response:\n" >"$errfile"
                cat "$outfile" >>"$errfile"
                echo "\nThis L2 provider may be on the wrong network" >>"$errfile"
            fi
        fi

        if [ -n "$bad" ]; then
            db_subst session-stagenet-node/bad-l2-provider ERROR "$(debconf-escape -e <$errfile)"

            db_input high session-stagenet-node/bad-l2-provider
            db_go
            db_get session-stagenet-node/bad-l2-provider
            RETRY="$RET"
            db_reset session-stagenet-node/bad-l2-provider
            if [ "$RETRY" = "true" ]; then
                db_reset session-stagenet-node/l2-provider
            else
                break
            fi
        else
            break
        fi
    else
        db_input high session-stagenet-node/no-l2-provider
        db_go
        db_get session-stagenet-node/no-l2-provider
        RETRY="$RET"
        db_reset session-stagenet-node/no-l2-provider
        if [ "$RETRY" = "true" ]; then
            db_reset session-stagenet-node/l2-provider
        else
            break
        fi
    fi
done
